# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'parser.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QColor, QSyntaxHighlighter, QTextCharFormat
from parserCode import *


# from PIL import Image

# creating a object


class SyntaxHighlighter(QSyntaxHighlighter):
    def __init__(self, parent):
        super(SyntaxHighlighter, self).__init__(parent)
        self._highlight_lines = dict()

    def highlight_line(self, line, fmt):
        if isinstance(line, int) and line >= 0 and isinstance(fmt, QTextCharFormat):
            self._highlight_lines[line] = fmt
            tb = self.document().findBlockByLineNumber(line)
            self.rehighlightBlock(tb)

    def clear_highlight(self):
        self._highlight_lines = dict()
        self.rehighlight()

    def highlightBlock(self, text):
        line = self.currentBlock().blockNumber()
        fmt = self._highlight_lines.get(line)
        if fmt is not None:
            self.setFormat(0, len(text), fmt)


class Ui_MainWindow(object):
    def __init__(self):
        file_left = []
        file_right = []
        self.file = []
        self.text = []
        self.data2 = ""
        self.scan_flag = False

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.load_push = QtWidgets.QPushButton(self.centralwidget)
        self.load_push.setGeometry(QtCore.QRect(10, 30, 161, 61))
        font = QtGui.QFont()
        font.setFamily("Niagara Solid")
        font.setPointSize(24)
        self.load_push.setFont(font)
        self.load_push.setObjectName("load_push")
        self.scan_push = QtWidgets.QPushButton(self.centralwidget)
        self.scan_push.setGeometry(QtCore.QRect(210, 30, 161, 61))
        font = QtGui.QFont()
        font.setFamily("Niagara Solid")
        font.setPointSize(24)
        self.scan_push.setFont(font)
        self.scan_push.setObjectName("scan_push")
        self.save_push = QtWidgets.QPushButton(self.centralwidget)
        self.save_push.setGeometry(QtCore.QRect(600, 30, 161, 61))
        font = QtGui.QFont()
        font.setFamily("Niagara Solid")
        font.setPointSize(24)
        self.save_push.setFont(font)
        self.save_push.setObjectName("save_push")
        self.textEdit_left = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_left.setGeometry(QtCore.QRect(10, 110, 371, 431))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.textEdit_left.setFont(font)
        self.textEdit_left.setObjectName("textEdit_left")
        self.textEdit_right = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_right.setGeometry(QtCore.QRect(400, 110, 391, 431))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.textEdit_right.setFont(font)
        self.textEdit_right.setObjectName("textEdit_right")
        self.parse_push = QtWidgets.QPushButton(self.centralwidget)
        self.parse_push.setGeometry(QtCore.QRect(400, 30, 161, 61))
        font = QtGui.QFont()
        font.setFamily("Niagara Solid")
        font.setPointSize(24)
        self.parse_push.setFont(font)
        self.parse_push.setObjectName("parse_push")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self._highlighter = SyntaxHighlighter(self.textEdit_left.document())
        self._highlighter_right = SyntaxHighlighter(self.textEdit_right.document())

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.load_push.setText(_translate("MainWindow", "Load"))
        self.scan_push.setText(_translate("MainWindow", "Scan"))
        self.save_push.setText(_translate("MainWindow", "Save"))
        self.parse_push.setText(_translate("MainWindow", "Parse"))

        self.load_push.clicked.connect(self.click_load)
        self.scan_push.clicked.connect(self.click_scan)
        self.save_push.clicked.connect(self.click_save)
        self.parse_push.clicked.connect(self.click_parse)

    def click_parse(self):
        # print("Parse")
        # print(self.scanner)
        if (self.scan_flag):
            if (self.scan_done):
                # print("Scan Done!")
                P = deepcopy(Parser(self.scanner))

                try:
                    syntax_tree = P.get_tree()
                    self.scanner.reset_i()
                    dotexport.DotExporter(syntax_tree, nodeattrfunc=P.nodeattrfunc,
                                          edgeattrfunc=P.edgeattrfunc).to_picture("Tree.png")

                    # close()
                    # # reading the image
                    # testImage = imread("Tree.png")
                    #
                    # # displaying the image
                    # imshow(testImage)
                    # show()
                    # im.close()
                    im = Image.open("Tree.png")

                    im.show()

                except Error as reason:
                    # print(reason)
                    self.textEdit_right.clear()
                    self.textEdit_right.setText(str(reason))
                except:
                    try:
                        dotexport.DotExporter(syntax_tree, nodeattrfunc=P.nodeattrfunc,
                                              edgeattrfunc=P.edgeattrfunc).to_dotfile("tree.dot")

                        Source.from_file('tree.dot')

                        render('dot', 'png', 'tree.dot')
                        im = Image.open("Tree.dot.png")

                        im.show()
                    except:
                        pass

            else:
                pass
        else:
            pass

    def click_load(self):
        try:
            # print("LOAD!")

            ### Clear
            self.file_left = []
            self.file_right = []
            self.file = []
            self.textEdit_left.clear()
            self.textEdit_right.clear()
            ####

            fname = QFileDialog.getOpenFileName()
            if fname[0]:
                f = open(fname[0], 'r')
                self.file = f
                with f:
                    data = f.read()
                    self.data2 = data
                    self.textEdit_left.setText(data)
        except:
            pass

    def click_scan(self):
        try:
            self._highlighter.clear_highlight()
            # print("SCAN!")
            self.scan_flag = True
            fmt1 = QTextCharFormat()
            fmt1.setBackground(QColor("orange"))
            fmt2 = QTextCharFormat()
            fmt2.setBackground(QColor("yellow"))
            self._highlighter_right.highlight_line(0, fmt1)
            text = self.textEdit_left.toPlainText()
            nl_sp = text.split()
            if len(text) == 0 or len(nl_sp) == 0:
                str = "Please Enter A Valid File! "
                self.textEdit_right.clear()
                self.textEdit_right.setText(str)
            else:
                S = Scanner(text)
                self.scanner = S
                # print(S)
                if not S.check():
                    tok = S.get_tokens()
                    str = "No Errors Are Found!\n"
                    for i in range(len(tok)):
                        if tok[i][0] != '':
                            str += tok[i][1] + " , " + tok[i][0] + '\n'
                    self.textEdit_right.clear()
                    self.textEdit_right.setText(str)
                    self.scan_done = True
                else:
                    str = "Errors Are Found, Syntax Tree Can't Be Generated!\n "
                    self.textEdit_right.clear()
                    self.textEdit_right.setText(str)
                    self.scan_done = False

                    list = S.get_errors()
                    for i in range(len(list)):
                        self._highlighter.highlight_line(list[i][0], fmt2)

        except:
            pass

    def click_save(self):
        try:
            # print("SAVE!")
            self.Save_Right()
        except:
            pass

    def Save_Right(self):
        # S_File will get the directory path and extension.
        S__File = QtWidgets.QFileDialog.getSaveFileName(None, 'SaveTextFile', '/', "Text Files (*.txt)")

        # This will let you access the test in your QTextEdit
        # Text = self.textEdit_right.toPlainText()
        tokens = self.scanner.get_tokens()

        if not self.scanner.check():
            tok = self.scanner.get_tokens()
            str = ""
            for i in range(len(tok)):
                if tok[i][0] != '':
                    str += tok[i][1] + " , " + tok[i][0] + '\n'
            # This will prevent you from an error if pressed cancel on file dialog.
            if S__File[0]:
                # Finally this will Save your file to the path selected.
                with open(S__File[0], 'w') as file:
                    file.write(str)

        else:
            pass


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
